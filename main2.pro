implement main
    open core, file, stdio

domains
    genre = история; драма; фантастика; комедия; ужасы; военный; фэнтези.
    афиша = афиша(string Название_кнофильма, string Дата_сеанса, string Время_сеанса, integer Цена_билета).
    показжанр = показжанр(string Название_кинотеатра, string Адрес, string Название_фильма).

class facts - kino
    кинотеатр : (integer IdКинотеатра, string НазваниеКинотеатра, string Адрес, string Телефон, integer КоличествоМест).
    фильм : (integer Idфильма, string Названиефильма, integer Год, genre Жанр).
    показывают : (integer IdКинотеатра, integer Idфильма, string Дата, string Время, integer Выручка, integer ЦенаБилета).

% Доп предикаты
class predicates
    длина : (A*) -> integer N.
    сумма_элементов : (real* List) -> real Sum.

clauses
    длина([]) = 0.
    длина([_ | T]) = длина(T) + 1.

    сумма_элементов([]) = 0.
    сумма_элементов([H | T]) = сумма_элементов(T) + H.

class predicates
    данные_кинотеатра_показывающего_фильм_определенного_жанра : (genre Жанр) -> показжанр* Название.
    когда_и_где_показывают_определённый_фильм : (string Названиефильма) -> string* Названия determ.
    количество_кинотеатров : (string НазваниеКинофильма) -> integer N determ.
    количество_мест_в_кинотеатре : (integer IdКинотеатра) -> integer* Количество determ.
    адрес_кинотеатра : (string НазваниеКинотеатра) -> string* Адреса.
    выручка : (string Названиефильма) -> real Выручка determ.
    афиша_кинотеатра : (string НазваниеКинотеатра, string Адрес) -> афиша* Афиша determ.

clauses
% Данные кинотеатра, показывающего фильм определенного жанра
    данные_кинотеатра_показывающего_фильм_определенного_жанра(J) = AIK :-
        AIK =
            [ показжанр(NK, A, NF) ||
                показывают(IK, IF, _, _, _, _),
                фильм(IF, NF, _, J),
                кинотеатр(IK, NK, A, _, _)
            ],
        !.

% Кинотеатр, показывающий определенный фильм (по названию фильма)
    когда_и_где_показывают_определённый_фильм(NF) = KP :-
        фильм(IF, NF, _, _),
        !,
        KP =
            [ NK ||
                показывают(IK, IF, _, _, _, _),
                кинотеатр(IK, NK, _, _, _)
            ].
    количество_кинотеатров(NF) = длина(когда_и_где_показывают_определённый_фильм(NF)).

% Количество мест в кинотеатре
    количество_мест_в_кинотеатре(IK) = K :-
        кинотеатр(IK, _, _, _, KM),
        !,
        K = [ KM || кинотеатр(IK, _, _, _, KM) ].

% Адрес кинотеатра
    адрес_кинотеатра(NK) = AK :-
        !,
        AK = [ A || кинотеатр(_, NK, A, _, _) ].

% Выручка кинотеатров с определенного фильма
    выручка(NF) = сумма_элементов([ V || показывают(_, IF, _, _, V, _) ]) :-
        фильм(IF, NF, _, _),
        !.

% Афиша кинотеатра
    афиша_кинотеатра(NK, A) =
            [ афиша(NF, D, T, C) ||
                показывают(IK, IF, D, T, _, C),
                фильм(IF, NF, _, _)
            ] :-
        кинотеатр(IK, NK, A, _, _),
        !.

% Вывод времени, места и цены сеанса фильма
class predicates
    write_afisha : (афиша* Время_И_Кинотетр_и_Цена_билета).
    write_pokasjanr : (показжанр* Название_И_Адрес_Кинотеатра).

clauses
    write_afisha(L) :-
        foreach афиша(NF, D, T, C) = list::getMember_nd(L) do
            Length = string::length(NF),
            if Length > 20 then
                writef(string::format("%53s %s %8s %8d\n", NF, D, T, C))
            else
                writef(string::format("%33s %30s %8s %8d\n", NF, D, T, C))
            end if,
            writef("\t---------------------------------------------+------------+-------+-------------\n")
        end foreach.

    write_pokasjanr(L) :-
        foreach показжанр(NK, A, NF) = list::getMember_nd(L) do
            Length = string::length(NF),
            if Length > 20 then
                writef(string::format("%23s %15s %50s\n", NK, A, NF))
            else
                writef(string::format("%23s %15s %32s\n", NK, A, NF))
            end if,
            writef("\t---------------+-------------------+------------------------------------------------\n")
        end foreach.

clauses
    run() :-
        console::init(),
        reconsult("..\\kino.txt", kino),
        fail.

    run() :-
        NK = "Синема стар",
        write("\nПравило: Адреса кинотеатра \"", NK, "\"\n"),
        L = адрес_кинотеатра(NK),
        write(L, " \n"),
        write("\n"),
        fail.

    run() :-
        NF = "Вызов",
        write("Правило: Кинотеатр, показывающий фильм \"", NF, "\"\n"),
        L = когда_и_где_показывают_определённый_фильм(NF),
        write(L, " \n"),
        write("Количество кинотеатров = "),
        write(количество_кинотеатров(NF), "\n\n"),
        nl,
        fail.

    run() :-
        IK = 4,
        write("Правило: Количество мест в кинотеатре с ID \"", IK, "\"\n"),
        L = количество_мест_в_кинотеатре(IK),
        write(L, " \n"),
        nl,
        fail.

    run() :-
        write("Правило: Данные кинотеатра, показывающего фильм определенного жанра \n"),
        J = комедия,
        write("Жанр = ", J, "\n"),
        writef(string::format("%21s %15s %35s \n", "Название КТ", " Адрес", "Название КФ")),
        writef("\t---------------+-------------------+------------------------------------------------\n"),
        write_pokasjanr(данные_кинотеатра_показывающего_фильм_определенного_жанра(J)),
        write("\n"),
        fail.

    run() :-
        NF = "Джон Уик 4",
        write("Правило: Выручка всех кинотеатров за фильм: ", NF, "\n"),
        L = выручка(NF),
        write("Выручка = ", L, " \n\n"),
        fail.

    run() :-
        NK = "Формула кино",
        A = "Кутузовский просп., 57",
        write("\n\t\tАфиша кинотеатра \"", NK, "\", который находится на ", A, "\n\n"),
        writef(string::format("%35s %26s %10s %13s\n", "Название КФ", "Дата", "Время", "Цена билета")),
        writef("\t---------------------------------------------+------------+-------+-------------\n"),
        write_afisha(афиша_кинотеатра(NK, A)),
        nl,
        fail.

    run() :-
        succeed.

end implement main

goal
    console::run(main::run).
